#!/usr/bin/python
import rospy
import itertools
#import ros_numpy
import message_filters
from std_msgs.msg import Int64, String
from sensor_msgs.msg import CompressedImage, Image, JointState
from geometry_msgs.msg import Twist, Pose, TwistStamped, PoseStamped
from imitate_msgs.msg import GripperStamped
import numpy as np
import os
from scipy.misc import imshow
import cv2 
import time
import csv
import os
import sys
from cv_bridge import CvBridge

# Global Variables
#The first argument should be the name task that we are doing
task = sys.argv[1]
if not os.path.exists('datas/' + task + '/'):
  os.mkdir('datas/' + task + '/')
save_folder=None
writer = None
text_file = None
is_recording = False
counter = 0

def callback(pose, vels, rgb, depth, gripper):
  """
  This is the callback method for the synchronized subscriber
  Params:
    pose - Position(x,y,z), Quaternion(x,y,z,w)
    vels - Linear(x,y,z), Angular(x,y,z)
    rgb - Compressed Image 3 channels
    depth - Compressed Image 1 channel
    gripper - 0/1 for is gripping
  """
  curr_time = str(time.time())
  bridge = CvBridge()
  # We are toggling this global variable
  global is_recording
  global save_folder
  global writer
  global counter
  if is_recording:
	rgb_image = bridge.imgmsg_to_cv2(rgb, desired_encoding="passthrough")
	depth_image = bridge.imgmsg_to_cv2(depth, desired_encoding="passthrough")
	cv2.imwrite(save_folder + str(counter) + '_rgb.png', rgb_image)
	cv2.imwrite(save_folder + str(counter) + '_depth.png', depth_image)
	# end effector position
	pose_data = pose.pose
	posit = pose_data.position
	# end effector orientation
	orient = pose_data.orientation
	twist = vels.twist
	# linear velocity
	lin = twist.linear
	# angular velocity
	ang = twist.angular

	gripper_data = gripper.data
	# Unique Code, Position, Quaternion, Linear Vel, Angular Vel, Gripping, Time of Recording
	arr = [counter, posit.x, posit.y, posit.z]
	arr += [orient.w, orient.x, orient.y, orient.z]
	arr += [lin.x, lin.y, lin.z]
	arr += [ang.x, ang.y, ang.z]
	arr += [gripper_data.data, float(curr_time)]
	if writer != None:
	  writer.writerow(arr)
	else:
	  print('WARNING: UNABLE TO WRITE DATA TO WRITER!') 
	counter += 1

def record(value):
  """
  Callback function for the toggle subscriber.
  Params:
    value - the toggle signal 0/1 from the teleoperation
  """
  global save_folder
  global task
  global is_recording
  global text_file
  global writer
  global counter
  # This is the toggle signal from the teleoperation
  if value.data == "0":
    counter = 0

    if is_recording == False:
      return
    else:
      if text_file != None:
        text_file.close()
        text_file = None
        print('File closed')
      is_recording=False
      print('STOP')
  else:
    save_folder_tmp='datas/' + task + '/' + str(time.time()) + '/'
    os.mkdir(save_folder_tmp)
    save_folder = save_folder_tmp
    print('save folder changed: %s' % save_folder)
    text_file = open(save_folder + 'vectors.txt', 'w')
    writer = csv.writer(text_file)
    is_recording = True
    print('START')

# The Topics we are Subscribing to
right_arm_pose = message_filters.Subscriber('/tf/right_arm_pose', PoseStamped)
right_arm_vel = message_filters.Subscriber('/tf/right_arm_vels', TwistStamped)
rgb_state_sub = message_filters.Subscriber('/kinect2/qhd/image_color_rect', Image)
depth_state_sub = message_filters.Subscriber('/kinect2/qhd/image_depth_rect', Image)
gripper_state_sub = message_filters.Subscriber('/movo/right_gripper/gripper_is_open', GripperStamped)

# Initialize
rospy.init_node('imitate_recorder', log_level=rospy.DEBUG)
#ts = ApproxTimeSync([right_arm_pose, right_arm_vel, rgb_state_sub,  depth_state_sub, gripper_state_sub], 5, 0.1)
ts = message_filters.ApproximateTimeSynchronizer([right_arm_pose, right_arm_vel, rgb_state_sub,  depth_state_sub, gripper_state_sub], 1, 0.1)
ts.registerCallback(callback)

# Toggle
toggle_button = message_filters.Subscriber('/unity_learning_record', String)
toggle_button.registerCallback(record)

print('Spinning')
rospy.spin()